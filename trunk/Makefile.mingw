ZSNESFX=1
ZSNESC4=1
#SPC700ASM=1
#NETPLAY=1
UNZIP=1
JMA=1
#GLIDE=1
#OPENGL=1
ASMKREED=1
SDD1_DECOMP=1
#SDD1_VERIFY=0
CHEATS=1
2XSAI=1
SCREENSHOTS=1

ifdef ZSNESFX
	FXOBJ=i386/fxemu2b.o i386/fxemu2.o i386/fxemu2c.o i386/fxtable.o \
		i386/sfxproc.o i386/ZSNES.O
	FXDEFINES=-DZSNES_FX -DEXECUTE_SUPERFX_PER_LINE
	FXDEPENDS=zsnes_fx
	FXNO_DEPENDS=c_fx
else
	FXOBJ=fxinst.o fxemu.o fxdbg.o
	FXDEFINES=-DEXECUTE_SUPERFX_PER_LINE
	FXDEPENDS=c_fx
	FXNO_DEPENDS=zsnes_fx
endif

ifdef ZSNESC4
	C4OBJ=i386/C4.O i386/zsnesc4.o c4.o
	C4DEFINES=-DZSNES_C4
	C4DEPENDS=zsnes_c4
	C4NO_DEPENDS=c_c4
else
	C4OBJ=c4.o c4emu.o
	C4DEFINES=
	C4DEPENDS=c_c4
	C4NO_DEPENDS=zsnes_c4
endif

ifdef SPC700ASM
	SOUNDOBJ=spctool/spc700.o spctool/dsp.o spctool.o spctool/soundmod.o spc.o
	SOUNDDEFINES=-DSPCTOOL
else
	SOUNDOBJ=spc700.o soundux.o apu.o i386/SPC.O
	SOUNDDEFINES=-DSPC700_C
endif

# ASM core must be used, or you may experience a movie desync
ASMCPU=1
ifdef ASMCPU
	CPUOBJ=i386/cpuops.o i386/cpuexec.o i386/sa1ops.o
else
	CPUOBJ=cpuops.o cpuexec.o sa1cpu.o
endif

PLATFORMOBJ=win32/win32.o win32/directx.o win32/render.o win32/wsnes9x.o win32/wconfig.o \
	win32/auxmath.o win32/AVIOutput.o win32/InputCustom.o win32/lazymacro.o win32/snes9x-rc.o \

ifdef CHEATS
	CHEATOBJ=cheats.o cheats2.o
endif

SNAPOBJ=snaporig.o snapshot.o
MOVIEOBJ=movie.o

ifdef SCREENSHOTS
	SCREENSHOTOBJ=screenshot.o
	SHOTDEFINES=-DHAVE_LIBPNG
	LDLIBS=-lpng
endif

ifdef 2XSAI
	ifdef ASMKREED
		KREEDOBJ=i386/2XSAIMMX.O i386/bilinear.o 2xsai.o
		KREEDDEFINES=-DMMX
	else
		KREEDOBJ=2xsai.o
	endif
endif

ifdef SDD1_DECOMP
	SDD1OBJ=sdd1emu.o
	ifdef SDD1_VERIFY
		SDD1DEFINES=-DSDD1_DECOMP -DSDD1_VERIFY
	else
		SDD1DEFINES=-DSDD1_DECOMP
	endif
endif

SPC7110OBJ=spc7110.o
OBC1OBJ=obc1.o
SETAOBJ=seta.o seta010.o seta011.o seta018.o

OBJECTS=$(CPUOBJ) $(SOUNDOBJ) apudebug.o $(FXOBJ) $(C4OBJ) \
	cpu.o sa1.o debug.o sdd1.o tile.o srtc.o gfx.o memmap.o clip.o \
	conffile.o dsp1.o ppu.o reader.o dma.o snes9x.o data.o globals.o \
	$(SPC7110OBJ) $(OBC1OBJ) $(SETAOBJ) $(KREEDOBJ) $(SDD1OBJ) \
	$(CHEATOBJ) $(PLATFORMOBJ) $(SNAPOBJ) $(SCREENSHOTOBJ) $(MOVIEOBJ) \
	lua-engine.o $(LUAOBJECTS)

ifdef NETPLAY
	OBJECTS+=netplay.o server.o
	NETPLAYDEFINES=-DNETPLAY_SUPPORT
endif

ifdef UNZIP
	OBJECTS+=loadzip.o unzip/unzip.o unzip/explode.o unzip/unreduce.o unzip/unshrink.o
	UNZIPDEFINES=-DUNZIP_SUPPORT
endif

ifdef JMA
OBJECTS+=jma/s9x-jma.o jma/7zlzma.o jma/crc32.o jma/iiostrm.o jma/inbyte.o \
	jma/jma.o jma/lzma.o jma/lzmadec.o jma/winout.o
JMADEFINES=-DJMA_SUPPORT -fexceptions
endif

ifdef GLIDE
	GLIDEDEFINES=-DUSE_GLIDE
	GLIDELIBS=-lglide2x
	GLIDEDEPENDS=use_glide
	GLIDENO_DEPENDS=no_glide
else
	GLIDEDEPENDS=no_glide
	GLIDENO_DEPENDS=use_glide
endif

ifdef OPENGL
	OPENGLDEFINES=-DUSE_OPENGL
	OPENGLLIBS=-lglu32 -lopengl32
	OPENGLDEPENDS=use_opengl
	OPENGLNO_DEPENDS=no_opengl
else
	OPENGLDEPENDS=no_opengl
	OPENGLNO_DEPENDS=use_opengl
endif

JOYDEFINES=-DJOYSTICK_SUPPORT

#AUDIODEFINES=-DFMOD_SUPPORT
SOUNDENGINE=-lfmod -lmingw32

CCC=c++
CC=gcc
GASM=$(CCC)
NASM=nasm

INCLUDES=-I. -Ii386 -Iunzip -Ifmod -Idxinc -L. -I../FMOD/api/inc -I../lua/src
LDLIBS+=-lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -lcomctl32 -ladvapi32 -lshell32 -lole32 -loleaut32 -luuid -ladvapi32 -lwsock32 -lwinmm -lddraw -ldsound -ldxguid -lvfw32 -lshlwapi -lz lua51.dll

OPTIMISE=-O2 -march=pentium -fomit-frame-pointer -fno-exceptions -Wno-unused-parameter -mwindows
#OPTIMISE=-g -fno-exceptions -mwindows -w

CCFLAGS= \
	-DZLIB \
	-DVAR_CYCLES \
	-DCPU_SHUTDOWN \
	-DSPC700_SHUTDOWN \
	-DSDD1_DECOMP \
	-DHAVE_STRINGS_H -DHAVE_STDINT_H \
	-DNEW_COLOUR_BLENDING \
	-DCORRECT_VRAM_READS \
	-DJP_FIX \
	-DWIN32 \
	-DHAVE_STDINT_H \
	-D_WIN32_IE=0x0501 \
	-D_WIN32_WINNT=0x0400 \
	-DISOLATION_AWARE_ENABLED=0 \
	$(FXDEFINES) \
	$(C4DEFINES) \
	$(SOUNDDEFINES) \
	$(NETPLAYDEFINES) \
	$(UNZIPDEFINES) \
	$(JMADEFINES) \
	$(GLIDEDEFINES) \
	$(OPENGLDEFINES) \
	$(SHOTDEFINES) \
	$(KREEDDEFINES) \
	$(SDD1DEFINES) \
	$(JOYDEFINES) \
	$(AUDIODEFINES)

CFLAGS=$(CCFLAGS)

.SUFFIXES: .o .cpp .c .cc .h .m .i .S .asm .obj .O .CPP .C .ASM

all: offsets.exe snes9x.exe

$(FXDEPENDS):
	cp offsets.exe $(FXDEPENDS)
	rm -f $(FXNO_DEPENDS)

$(C4DEPENDS):
	cp offsets.exe $(C4DEPENDS)
	rm -f $(C4_NODEPENDS)

offsets.exe: offsets.o
	$(CCC) $(INCLUDES) -o $@ offsets.o
	./offsets.exe > i386/offsets.h

win32/snes9x-rc.o: win32/rsrc/snes9x.rc win32/rsrc/resource.h
	windres --include-dir win32/rsrc --language=0x413 -D_WIN32_IE=0x0501 win32/rsrc/snes9x.rc -owin32/snes9x-rc.o

snes9x.exe: $(OBJECTS) $(MINGWOBJECTS)
	$(CCC) $(INCLUDES) -Wl,--subsystem,windows -o $@ -s $(OBJECTS) $(LDLIBS) $(SOUNDENGINE) $(OPENGLLIBS)

cpu.o:
	$(CCC) $(INCLUDES) -c $(OPTIMISE) $(CCFLAGS) cpu.cpp -o $@

sa1cpu.o:
	$(CCC) $(INCLUDES) -c $(OPTIMISE) $(CCFLAGS) sa1cpu.cpp -o $@

.cpp.o:
	$(CCC) $(INCLUDES) -c $(OPTIMISE) $(CCFLAGS) $*.cpp -o $@

.c.o:
	$(CC) $(INCLUDES) -c $(OPTIMISE) $(CFLAGS) $*.c -o $@

.cpp.S:
	$(GASM) $(INCLUDES) -S $(OPTIMISE) $(CCFLAGS) $*.cpp -o $@

.cpp.i:
	$(GASM) $(INCLUDES) -E $(OPTIMISE) $(CCFLAGS) $*.cpp -o $@

.S.o:
	$(GASM) $(INCLUDES) -c -D__DJGCC -x assembler-with-cpp $(OPTIMISE) $(CCFLAGS) $*.S -o $@

.S.i:
	$(GASM) $(INCLUDES) -c -E $(OPTIMISE) $(CCFLAGS) $*.S -o $@

.asm.o:
	$(NASM) -d__DJGPP__=1 -f win32 $(FXDEFINES) -i . -i i386 -o $@ $*.asm

.obj.o:
	cp $*.obj $*.o

.CPP.O:
	$(CCC) $(INCLUDES) -c  $(OPTIMISE) $(CCFLAGS) $*.CPP -o $@

.C.O:
	$(CC) $(INCLUDES) -c $(OPTIMISE) $(CFLAGS) $*.C -o $@

.ASM.O:
	$(NASM) -d__DJGPP__=1 -f win32 $(FXDEFINES) -i . -i i386 -o $@ $*.ASM -o $@

clean:
	rm -f $(FXDEPENDS) $(C4DEPENDS) $(FXNO_DEPENDS) $(C4NO_DEPENDS)
	rm -f $(OBJECTS) *.o i386/*.o i386/offsets.h offsets.o
	rm -f snes9x.exe offsets.exe

compress:
	upx snes9x.exe
